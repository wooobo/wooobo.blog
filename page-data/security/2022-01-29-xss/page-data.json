{"componentChunkName":"component---src-templates-blog-template-js","path":"/security/2022-01-29-xss/","result":{"data":{"cur":{"id":"bbb26ef3-70fa-558b-9be9-ff2c3c82c765","html":"<h1 id=\"xss\" style=\"position:relative;\"><a href=\"#xss\" aria-label=\"xss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XSS?</h1>\n<p>XSS(Cross-site Scripting)란 SQL injection과 함께 웹 상에서 가장 기초적인 취약점 공격 방법의 일종으로,\n악의적인 사용자가 공격하려는 사이트에 스크립트를 넣는 기법을 말한다.\n공격에 성공하면 사이트에 접속한 사용자는 삽입된 코드를 실행하게 되며,\n보통 의도치 않은 행동을 수행시키거나 쿠키나 세션 토큰 등의 민감한 정보를 탈취한다.</p>\n<h1 id=\"공격방법\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B2%A9%EB%B0%A9%EB%B2%95\" aria-label=\"공격방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공격방법</h1>\n<ol>\n<li>Stored XSS\n<ul>\n<li>Stored XSS는 사이트 게시판이나 댓글, 닉네임 등 스크립트가 서버에 저장되어 실행되는 방식</li>\n</ul>\n</li>\n<li>Reflected XSS\n<ul>\n<li>Reflected XSS는 보통 URL 파라미터(특히 GET 방식)에 스크립트를 넣어 서버에 저장하지 않고 그 즉시 스크립트를 만드는 방식</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>대부분은 Stored XSS라고 생각하면 된다. Reflected XSS의 경우 브라우저 자체에서 차단하는 경우가 많아 상대적으로 공격을 성공시키기 어렵다.<br>\n-나무위키-</p>\n</blockquote>\n<h1 id=\"대응방법\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%9D%91%EB%B0%A9%EB%B2%95\" aria-label=\"대응방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대응방법</h1>\n<ul>\n<li>문자입력을 작성한 그대로 입력하지 않는다\n<ul>\n<li>문자를 필터링</li>\n<li>서버에서 브라우저 전송시 문자 인코딩</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">&lt;script></code>의 <code class=\"language-text\">&lt;</code>는 html문자 <code class=\"language-text\">&amp;lt;</code>로, <code class=\"language-text\">></code> 는 <code class=\"language-text\">&amp;gt;</code>로 변경한다.<br>\n이러한 <code class=\"language-text\">XSS</code>필터링해주는 라이브러리를 활용하는것도 좋을것같다 (<a href=\"https://github.com/naver/lucy-xss-filter\">lucy-xss-filter 링크</a>)</p>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<ul>\n<li><a href=\"https://tecoble.techcourse.co.kr/post/2021-04-26-cross-site-scripting/\">https://tecoble.techcourse.co.kr/post/2021-04-26-cross-site-scripting/</a></li>\n<li><a href=\"http://blog.plura.io/?p=7614\">http://blog.plura.io/?p=7614</a></li>\n<li><a href=\"https://namu.wiki/w/XSS\">https://namu.wiki/w/XSS</a></li>\n</ul>","excerpt":"XSS? XSS(Cross-site Scripting)란 SQL injection과 함께 웹 상에서 가장 기초적인 취약점 공격 방법의 일종으로,\n악의적인 사용자가 공격하려는 사이트에 스크립트를 넣는 기법을 말한다.\n공격에 성공하면 사이트에 접속한 사용자는 삽입된 코드를 실행하게 되며,\n보통 의도치 않은 행동을 수행시키거나 쿠키나 세션 토큰 등의 민감한 정보를 탈취한다. 공격방법 Stored XSS Stored XSS는 사이트 게시판이나 댓글, 닉네임 등 스크립트가 서버에 저장되어 실행되는 방식 Reflected XSS Reflected XSS는 보통 URL 파라미터(특히 GET 방식)에 스크립트를 넣어 서버에 저장하지 않고 그 즉시 스크립트를 만드는 방식 대부분은 Stored XSS라고 생각하면 된다. Reflected XSS의 경우 브라우저 자체에서 차단하는 경우가 많아 상대적으로 공격을 성공시키기 어렵다. -나무위키- 대응방법 문자입력을 작성한 그대로 입력하지 않는다 문자를 필…","frontmatter":{"date":"January 17, 2022","title":"XSS(Cross-site Scripting)","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/security/2022-01-29-xss/"}},"next":{"id":"6e4f1560-4cd7-50d6-91c0-f2709b55ba7c","html":"<blockquote>\n<p>“Unit Testing - 블라디미르 코리코프 지음” 책을 학습하여 일부 내용을 요약하였습니다.</p>\n</blockquote>\n<h2 id=\"단위-테스트의-목표\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%AA%A9%ED%91%9C\" aria-label=\"단위 테스트의 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단위 테스트의 목표</h2>\n<ul>\n<li>테스트로 대부분의 회귀에 대한 보험을 제공하는 도구라 할 수 있다.</li>\n<li>새로운 요구 사항에 더 잘 맞게 리팩터링한 후에도 기존 기능이 잘 작동하는지 확인하는데 도움이 된다.</li>\n<li>테스트 초반에 (상당한)노력이 필요하다.\n<ul>\n<li>그러나 프로젝트 후반에도 잘 성장할 수 있도록 하므로 장기적으로 보면 그 비용을 메울 수 있다.</li>\n</ul>\n</li>\n<li><strong>지속성과 확장성이 핵심이며, 이를 통해 장기적으로 개발 속도를 유지 할 수 있다.</strong></li>\n</ul>\n<h2 id=\"잘못-된-테스트\" style=\"position:relative;\"><a href=\"#%EC%9E%98%EB%AA%BB-%EB%90%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"잘못 된 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잘못 된 테스트</h2>\n<ul>\n<li>잘못된 테스트는 초반에 코드가 나빠지는것을 늦출 수는 있다.<br>\n테스트가 없는 상황에 비해 개발 속도가 덜 느려진다.<br>\n그러나, 잘못 된 테스트로 진행한다면 시간이 지남에 따라 프로젝트 침체단계를 필할 수는 없다.</li>\n</ul>\n<h2 id=\"제품-코드-대-테스트-코드\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%92%88-%EC%BD%94%EB%93%9C-%EB%8C%80-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C\" aria-label=\"제품 코드 대 테스트 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제품 코드 대 테스트 코드</h2>\n<ul>\n<li>제품코드와 테스트 코드는 다르다고 생각하지만 다르지 않다. 테스트 코드가 많을수록 좋다고 생각하지만,\n그렇지 않다. 코드는 자산이 아니라 책임이다. 코드가 많아 질수록 잠재적인 버그가 많아 지고 유지비가 증가된다.\n테스트 코드 역시 코드다. 특정 문제를 해결하는것. 다른 코드와 마찬가지로 단위 테스트도 버그에 취약하고 유지보수가 필요하다</li>\n</ul>\n<h2 id=\"외부-라이브러리의-코드-경로를-고려할-수-없음\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9D%98-%EC%BD%94%EB%93%9C-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%88%98-%EC%97%86%EC%9D%8C\" aria-label=\"외부 라이브러리의 코드 경로를 고려할 수 없음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부 라이브러리의 코드 경로를 고려할 수 없음</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public static int Parse(string input) \n{\n    return int.parse(input);\n}\n\npublic void test() \n{\n    int result = Parse(\"5\");\n    Assert.Equal(5, result);\n}</code></pre></div>\n<p>테스트는 모든 구성 요소를 검증한다. 단지 값을 반환하는 한 줄이라 하더라도 단일한 구성 요소이기는 하다.\n하지만, 테스트는 완벽하지 않다. 프레임워크의 int.parse 메서드가 수행하는 코드 경로는 고려하지 않았다.<br>\n<code class=\"language-text\">null</code>,<code class=\"language-text\">\"\"</code>,<code class=\"language-text\">5</code>,<code class=\"language-text\">정수가 아님</code>,<code class=\"language-text\">너무 긴 문자열</code>  숨겨진 분기가 많다.<br>\n수 많은 예외상황을 모두 테스트로 다루는지 확인 할 수 없다.\n이는 커버리지 지표가 외부 라이브러리의 코드 경로를 고려야해야 한다는것은 아니다.(고려하면 안된다.)\n커버리지 지표로 테스트가 철저한지 또는 테스트가 충분하지 알 수 없다.<br>\n[<a href=\"https://err0rcode7.github.io/backend/2021/05/11/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80.html\">테스트 커버리지 참고 링크</a>]</p>\n<h2 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h2>\n<p>코드는 점점 나빠지는 경향이 있다. 코드가 변경 될때마다 코드의 무질서도(엔트로피)는 증가된다. 이러한 상황에서 지속적인 정리와 리팩토링이 없으면\n시스템은 점점 복잡해지고 흐트러진다. 테스트로 이러한 부분을 뒤집을 수 있다. 테스트는 안전망 역할을 하며 대부분의 회귀에 대한\n보험을 제공하는 도구라 할 수 있다.</p>\n<hr>\n<blockquote>\n<p>“Unit Testing - 블라디미르 코리코프 지음” 책을 학습하여 일부 내용을 요약하였습니다.</p>\n</blockquote>","frontmatter":{"date":"January 12, 2022","title":"단위 테스트의 목표","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/tdd/2022-01-12-unit-testing-01/"}},"prev":{"id":"5b4435a0-32fb-50cd-951d-7964f3f09aed","html":"<h1 id=\"csrf사이트-간-요청-위조cross-site-request-forgery\" style=\"position:relative;\"><a href=\"#csrf%EC%82%AC%EC%9D%B4%ED%8A%B8-%EA%B0%84-%EC%9A%94%EC%B2%AD-%EC%9C%84%EC%A1%B0cross-site-request-forgery\" aria-label=\"csrf사이트 간 요청 위조cross site request forgery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSRF(사이트 간 요청 위조(Cross-Site Request Forgery)?</h1>\n<blockquote>\n<p>웹 애플리케이션 취약점 중 하나로 사용자가 자신의 의지와 무관하게 공격자가 의도한 행동을 해서 특정 웹페이지를 보안에 취약하게 한다거나 수정, 삭제 등의 작업을 하게 만드는 공격 방법이다. 2008년에 발생한 옥션의 개인정보 유출 사건에서도 관리자 계정을 탈취하는 데 이 방법이 사용되었다. 공격의 난이도가 높지 않아 흔히 사용된다.<br>\n-나무위키-</p>\n</blockquote>\n<h1 id=\"사례\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EB%A1%80\" aria-label=\"사례 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사례</h1>\n<ul>\n<li>2006 년 Netflix 웹사이트에는 CSRF에 대한 수많은 취약점이 있었습니다. 이 취약점으로 인해 공격자는 피해자의 대여 대기열에 DVD를 추가하거나, 계정의 배송 주소를 변경하거나, 계정을 완전히 손상시키기 위해 피해자의 로그인 자격 증명을 변경하는 등의 작업을 수행할 수 있었습니다.</li>\n<li>ING Direct 의 온라인 뱅킹 웹 애플리케이션은 불법 자금 이체를 허용하는 CSRF 공격에 취약했습니다.</li>\n<li>인기 동영상 웹사이트 YouTube 도 2008년에 CSRF에 취약했으며 이로 인해 모든 공격자가 모든 사용자의 거의 모든 작업을 수행할 수 있었습니다.</li>\n<li>McAfee Secure는 CSRF에도 취약했으며 공격자가 회사 시스템을 변경할 수 있었습니다. 이것은 최신 버전에서 수정되었습니다.</li>\n</ul>\n<p>-위키피디아-</p>\n<h1 id=\"공격\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B2%A9\" aria-label=\"공격 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공격</h1>\n<p>공격을 위해 애플리케이션을 분석해서 사용자 모르게 요청 URL을 심어 놓습니다.</p>\n<p>예를들면, 해당 사이트에 게시물을 작성하는 요청을 숨겨 놓을 수 있습니다.<br>\n<code class=\"language-text\">GET http://blabla.com/new/content?content=blabla content</code></p>\n<p>이렇게 되면 해당 유저가 로그인이 되어있다면, 이메일을 클릭하거나 하이퍼 링크를 통해 자신도 모르게 해당 사이트의 기능을 호출 될 수 있습니다.</p>\n<p><code class=\"language-text\">POST</code> 요청 같은경우 사용자가 버튼을 클릭하도록 속여서 공격할수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>body onload<span class=\"token operator\">=</span><span class=\"token string\">\"document.forms[0].submit()\"</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"http://blabla.com/new/content\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token operator\">></span>\n     <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"hidden\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"blabla content\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n     <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"이거 클릭하면 이벤트 당첨\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></code></pre></div>\n<p>이런식으로도 공격을 할수도 있습니다.</p>\n<h1 id=\"예방\" style=\"position:relative;\"><a href=\"#%EC%98%88%EB%B0%A9\" aria-label=\"예방 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예방</h1>\n<ol>\n<li>Security Token 사용</li>\n<li>Referer 확인\n<ol>\n<li>Referer는 HTTP 헤더에 있는 정보로 해당 요청이 요청된 페이지의 정보를 가지고 있는데 해당 정보는 Paros나 Zap, fiddler같은 프로그램으로 조작이 가능하기 때문에 권장되지 않는다.</li>\n</ol>\n</li>\n<li>GET/POST 등을 구분\n<ol>\n<li>img 태그 등을 이용할 경우 GET 요청으로 들어오게 될 것이고, 반면 흔히 하듯 form을 이용해 값을 받을 경우 POST를 이용하게 되는 경우가 많기 때문이다.</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">링크1</a><br>\n<a href=\"https://grooveshark.tistory.com/73\">링크2</a><br>\n<a href=\"https://namu.wiki/w/CSRF\">링크3</a></p>","frontmatter":{"date":"January 31, 2022","title":"CSRF(Cross-Site Request Forgery)","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/security/2022-01-29-csrf/"}},"site":{"siteMetadata":{"siteUrl":"https://wooobo.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/security/2022-01-29-xss/","nextSlug":"/tdd/2022-01-12-unit-testing-01/","prevSlug":"/security/2022-01-29-csrf/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}