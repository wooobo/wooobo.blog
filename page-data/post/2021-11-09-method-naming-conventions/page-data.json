{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/2021-11-09-method-naming-conventions/","result":{"data":{"cur":{"id":"9ee058ec-8bd5-5bb0-ac9c-cffb704c4254","html":"<h1 id=\"of-와-from-의미가-뭘까\" style=\"position:relative;\"><a href=\"#of-%EC%99%80-from-%EC%9D%98%EB%AF%B8%EA%B0%80-%EB%AD%98%EA%B9%8C\" aria-label=\"of 와 from 의미가 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>of 와 from 의미가 뭘까?</h1>\n<p>문득 코딩을 하다 궁금해졌습니다.<br>\n메소드의 이름으로 사용되는 of 와 from 의 의미에 대해서 알고 싶어졌습니다.</p>\n<p>구글 검색결과<br>\n<a href=\"https://docs.oracle.com/javase/tutorial/datetime/overview/naming.html\">oracle - java documentation</a><br>\n<a href=\"https://stackoverflow.com/questions/67680011/naming-convention-what-is-the-difference-between-from-vs-of-methods\">stackoverflow</a></p>\n<p>등등 에서 정보를 찾을 수 있었습니다.</p>\n<p>오라글 문서에서 정의하는 메소드 네이밍 컨벤션은 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Prefix</th>\n<th>Method Type</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>of</td>\n<td>static factory</td>\n<td>팩토리가 주로 입력 매개변수의 유효성을 검사하고 변환하지 않는 인스턴스를 만듭니다.</td>\n</tr>\n<tr>\n<td>from</td>\n<td>static factory</td>\n<td>입력 매개변수를 대상 클래스의 인스턴스로 변환합니다. 이 경우 입력에서 정보가 손실될 수 있습니다.</td>\n</tr>\n<tr>\n<td>parse</td>\n<td>static factory</td>\n<td>입력 문자열을 구문 분석하여 대상 클래스의 인스턴스를 생성합니다.</td>\n</tr>\n<tr>\n<td>format</td>\n<td>instance</td>\n<td>지정된 포맷터를 사용하여 임시 개체의 값을 형식화하여 문자열을 생성합니다.</td>\n</tr>\n<tr>\n<td>get</td>\n<td>instance</td>\n<td>대상 객체 상태의 일부를 반환합니다.</td>\n</tr>\n<tr>\n<td>is</td>\n<td>instance</td>\n<td>대상 개체의 상태를 쿼리합니다.</td>\n</tr>\n<tr>\n<td>with</td>\n<td>instance</td>\n<td>한 요소가 변경된 대상 개체의 복사본을 반환합니다. 이것은 JavaBean 의 set 메소드와 동일한 불변입니다.</td>\n</tr>\n<tr>\n<td>plus</td>\n<td>instance</td>\n<td>시간이 추가된 대상 개체의 복사본을 반환합니다.</td>\n</tr>\n<tr>\n<td>minus</td>\n<td>instance</td>\n<td>시간을 뺀 대상 개체의 복사본을 반환합니다.</td>\n</tr>\n<tr>\n<td>to</td>\n<td>instance</td>\n<td>이 개체를 다른 유형으로 변환합니다.</td>\n</tr>\n<tr>\n<td>at</td>\n<td>instance</td>\n<td>이 개체를 다른 개체와 결합합니다.</td>\n</tr>\n</tbody>\n</table>\n<p>of, from 뿐만 아니라 다른 네이밍 컨벤션도 궁금했는데 갓 오라클이네요 ^^\n(구글 번역기로 나온 번역이라.. 정확한 정보는 위 링크 참고해주세요.)</p>\n<h2 id=\"이해한걸-바탕으로-예제로-알아보기\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%95%B4%ED%95%9C%EA%B1%B8-%EB%B0%94%ED%83%95%EC%9C%BC%EB%A1%9C-%EC%98%88%EC%A0%9C%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"이해한걸 바탕으로 예제로 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이해한걸 바탕으로 예제로 알아보기</h2>\n<summary>예시로 사용될 클래스</summary>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 예시로 사용될 클래스 입니다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StringArray</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringArray<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stringArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">StringArray</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToObj</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">StringArray</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> delimiter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stringArray<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예시로 좀 더 탐구해봤습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">method_naming_conventions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// of (static factory)</span>\n    <span class=\"token comment\">// str1.{index}Of({arg}) -> str1 의 {arg} 값의 index 를 줘</span>\n    <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n    \n    <span class=\"token comment\">// {StringArray}.of({arg}); -> {arg} 를 검증해서 {StringArray} 인스턴스를 줘</span>\n    <span class=\"token class-name\">StringArray</span> of <span class=\"token operator\">=</span> <span class=\"token class-name\">StringArray</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5, 6]</span>\n\n    <span class=\"token comment\">// from (static factory)</span>\n    <span class=\"token comment\">// {StringArray}.from({arg}) -> {arg} 를 변경해서 {StringArray} 인스턴스 를 줘</span>\n    <span class=\"token class-name\">StringArray</span> from <span class=\"token operator\">=</span> <span class=\"token class-name\">StringArray</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1,2,3,4,5,6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5,6]</span>\n\n    <span class=\"token comment\">// parse (static factory)</span>\n    <span class=\"token comment\">// {Integer}.parseInt({arg}) -> {arg} 를 Int 로 parse 해줘</span>\n    <span class=\"token keyword\">int</span> parseInt <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n\n    <span class=\"token comment\">// format (instance)</span>\n    <span class=\"token comment\">// {String}.format({arg}) -> {arg}를 포맷팅해서 {String} 으로 줘</span>\n    <span class=\"token class-name\">String</span> stringFormat <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s 포맷팅합니다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"문자열\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stringFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"문자열 포맷팅합니다.\"</span>\n\n    <span class=\"token comment\">// get (instance)</span>\n    <span class=\"token comment\">// {instance}.get({arg}) -> {instance} 의 {arg} 번째 데이터를 줘</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stringList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"첫번째 String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    stringList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"두번째 String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stringList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"안녕 String\"</span>\n\n\n    <span class=\"token comment\">// is (instance)</span>\n    <span class=\"token comment\">// {instance}.is{Status}() -> {instance} 가 {Status} 이냐? 맞으면 true , 틀리면 false</span>\n    <span class=\"token class-name\">String</span> empty <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>empty<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    \n    <span class=\"token comment\">// to (instance)</span>\n    <span class=\"token comment\">// {number}.to{String} -> {number} 를 {String} 으로 변환해줘</span>\n    <span class=\"token class-name\">Integer</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1234\"</span>\n\n\n    <span class=\"token comment\">// at (instance)</span>\n    <span class=\"token comment\">// str.{char}At(arg) -> str 의 {arg} index 의 값을 {char} 로 반환해줘</span>\n    <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"adasd\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","excerpt":"of 와 from 의미가 뭘까? 문득 코딩을 하다 궁금해졌습니다. 메소드의 이름으로 사용되는 of 와 from 의 의미에 대해서 알고 싶어졌습니다. 구글 검색결과 oracle - java documentation stackoverflow 등등 에서 정보를 찾을 수 있었습니다. 오라글 문서에서 정의하는 메소드 네이밍 컨벤션은 아래와 같습니다. Prefix Method Type Use of static factory 팩토리가 주로 입력 매개변수의 유효성을 검사하고 변환하지 않는 인스턴스를 만듭니다. from static factory 입력 매개변수를 대상 클래스의 인스턴스로 변환합니다. 이 경우 입력에서 정보가 손실될 수 있습니다. parse static factory 입력 문자열을 구문 분석하여 대상 클래스의 인스턴스를 생성합니다. format instance 지정된 포맷터를 사용하여 임시 개체의 값을 형식화하여 문자열을 생성합니다. get instance 대상 객체 상태의 일부를 …","frontmatter":{"date":"November 09, 2021","title":"method naming 에서 of 와 from 의 차이는 뭘까?","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/post/2021-11-09-method-naming-conventions/"}},"next":{"id":"5ccac919-8ba0-504a-b3b4-848d167ff14e","html":"<br>\nJava 에서 Collection 의 불변성을 보장해주는 Collections.unmodifiableList 이 있습니다.  \nCollections.unmodifiableList(list) 로 반환된 객체는 수정삭제가 불가능합니다.\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 :[1]</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : true</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : [1, 2]</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : [1, 2]</span>\n\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : java.lang.UnsupportedOperationException 에러 발생</span>\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : java.lang.UnsupportedOperationException 에러 발생</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드 출력 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>UnsupportedOperationException</span></code></pre></div>\n<p><code class=\"language-text\">list.equals(list2)</code> 는 <code class=\"language-text\">true</code> 입니다. Collections.unmodifiableList 으로 반환된 객체는 결국 원본객체의 참조입니다.<br>\n그러므로 원본 객체가 수정되면 <code class=\"language-text\">Collections.unmodifiableList</code> 으로 반횐된 <code class=\"language-text\">list2</code>도 동일한 값을 가집니다.<br>\n그러나, <code class=\"language-text\">list2</code>는 불변객체 이므로 수정 삭제가 불가능합니다.</p>","frontmatter":{"date":"November 05, 2021","title":"Java - Collections.unmodifiableList 알아보기","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/java/2021-11-05-collections-unmodifiableList/"}},"prev":{"id":"9cc4279a-e5df-522d-9ccd-6f87aa50ffd4","html":"<br> \n<h1 id=\"정적-메소드-팩토리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC\" aria-label=\"정적 메소드 팩토리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메소드 팩토리</h1>\n<p>정적 메소드 팩토리를 사용하면, 의미있는 이름의 생성자를 제공 할 수 있는 장점이 있습니다.</p>\n<blockquote>\n<p>참조 글</p>\n</blockquote>\n<p><a href=\"https://www.baeldung.com/java-constructors-vs-static-factory-methods\">baeldung.com/java-constructors-vs-static-factory-methods</a></p>\n<blockquote>\n<p>1.생성자에는 의미 있는 이름 이 없으므로 항상 언어에서 부과하는 표준 명명 규칙으로 제한됩니다. 정적 팩토리 메소드는 의미 있는 이름을 가질 수 있으므로 그들이 하는 일을 명시적으로 전달합니다.</p>\n</blockquote>\n<p>2.정적 팩토리 메서드는 메서드, 하위 유형 및 기본 형식을 구현하는 동일한 유형을 반환할 수 있으므로 보다 유연한 반환 유형 범위를 제공합니다.<br>\n3.정적 팩토리 메서드는 완전히 초기화된 인스턴스를 미리 구성하는 데 필요한 모든 논리를 캡슐화 할 수 있으므로 생성자에서 이 추가 논리를 이동하는 데 사용할 수 있습니다. 이것은 생성자가 필드를 초기화하는 것 이외의 추가 작업 을 수행하는 것을 방지 합니다.<br>\n4.정적 팩토리 메소드는 제어된 인스턴스 메소드 일 수 있으며 싱글톤 패턴 이 이 기능의 가장 눈에 띄는 예입니다.</p>\n<h2 id=\"정적-메소드-팩토리-사용하지-않은경우\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80%EA%B2%BD%EC%9A%B0\" aria-label=\"정적 메소드 팩토리 사용하지 않은경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메소드 팩토리 사용하지 않은경우</h2>\n<p><code class=\"language-text\">Student</code> 클래스로 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> <span class=\"token string\">\"1학년\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Student</code> 클래스는 생성자가 두개 있습니다.</p>\n<ol>\n<li>public Student(String name, String className, String grade) <code class=\"language-text\">이름</code>, <code class=\"language-text\">반</code>, <code class=\"language-text\">학년</code> 인스턴스 변수 모두 받습니다.</li>\n<li>public Student(String name, String className) <code class=\"language-text\">이름</code>, <code class=\"language-text\">반</code> 두개만 받고 <code class=\"language-text\">grade</code> 는 “1학년” 으로 고정으로 생성됩니다.</li>\n</ol>\n<p>이때, <code class=\"language-text\">new Student(arg... )</code> 는 인자 값만 달라지고 생성자 이름은 클래스 이름으로 모두 동일합니다. 다양한 생성 인자 케이스가 많아진다면 의미를\n알기 힘들어지는 단점이 있습니다.</p>\n<p>정적 메소드 팩토리로 다시 살펴 보겠습니다.</p>\n<h2 id=\"정적-메소드-팩토리로-리팩토링\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A9%ED%86%A0%EB%A6%AC%EB%A1%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\"정적 메소드 팩토리로 리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 메소드 팩토리로 리팩토링</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">GRADE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1학년\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">createWithDefaultGrade</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token constant\">GRADE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">정적 메소드 팩토리</code> 를 사용하지 않았을때 보다 의미있는 생성자이름 이라는 것을 확인 할 수 있습니다.<br>\n<code class=\"language-text\">public Student(String name, String className)</code> 보다<br>\n<code class=\"language-text\">public static Student2 createWithDefaultGrade(String name, String className) {</code> 를 사용하면 “아! <code class=\"language-text\">Student</code> 인스턴스를 만드는데 <code class=\"language-text\">grade</code>는 기본값이 있구나”\n라고 의미를 해석 할 수 있게됩니다.</p>\n<h3 id=\"참조-글\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EA%B8%80\" aria-label=\"참조 글 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 글</h3>\n<p><a href=\"https://www.baeldung.com/java-constructors-vs-static-factory-methods\">baeldung.com/java-constructors-vs-static-factory-methods</a></p>","frontmatter":{"date":"November 10, 2021","title":"정적 메소드 팩토리 사용","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/post/2021-11-10-static-factory-method/"}},"site":{"siteMetadata":{"siteUrl":"https://wooobo.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/post/2021-11-09-method-naming-conventions/","nextSlug":"/java/2021-11-05-collections-unmodifiableList/","prevSlug":"/post/2021-11-10-static-factory-method/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}