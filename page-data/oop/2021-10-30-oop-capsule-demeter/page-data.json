{"componentChunkName":"component---src-templates-blog-template-js","path":"/oop/2021-10-30-oop-capsule-demeter/","result":{"data":{"cur":{"id":"0ee9f0b1-cd40-52aa-992e-e980f16678de","html":"<h1 id=\"캡슐화\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94\" aria-label=\"캡슐화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화</h1>\n<blockquote>\n<p>객체의 속성(data fields)와 행위(메서드)를 하나로 묶고,<br>\n실제 구현 내용 일부를 외부에 감추어 은닉한다.<br>\n(위키피디아)</p>\n</blockquote>\n<h1 id=\"디미터-법칙law-of-demeter\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%AF%B8%ED%84%B0-%EB%B2%95%EC%B9%99law-of-demeter\" aria-label=\"디미터 법칙law of demeter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디미터 법칙(Law of Demeter)</h1>\n<blockquote>\n<p>각 유닛은 다른 유닛에 대한 제한된 지식만 가지고 있어야 합니다. 현재 유닛과 “밀접하게” 관련된 유닛만 있어야 합니다.</p>\n</blockquote>\n<p>각 유닛은 친구들과만 대화해야 합니다. 낯선 사람과 이야기하지 마십시오.<br>\n가까운 친구에게만 이야기하십시오.</p>\n<blockquote>\n<p>(위키피디아)</p>\n</blockquote>\n<p>캡슐화는 외부로부터 내부 로직을 감춤으로써(은닉), 객체의 내부 데이터와 메소드의 응집도가 생깁니다. 이러한 부분은 스스로 자율적인 객체가 되는 이점이있습니다.\n프로젝트가 커지거나 유지보수를 해야할때 추가 또는 수정되는 코드의 비용을 줄일 수 있습니다.\n또한, 데이터와 메소드의 응집도가 생기므로 팀단위 개발 또는 규모가 커질때 파편화된 코드를 줄일 수 있고 중복된 코드를 방지 할 수있습니다.</p>\n<h2 id=\"캡슐화를-적용하지-않은-코드-예시\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%80-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-label=\"캡슐화를 적용하지 않은 코드 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡슐화를 적용하지 않은 코드 예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span>java\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># <span class=\"token constant\">TEST</span> 코드\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">memberRoleTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ADMIN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN 입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>MemberTest</code> 에서 <code class=\"language-text\">member.getRole()</code>으로 Role 에 대한 정보를 가져오고 있습니다. 그리고 member 외부의 코드에서\n<code class=\"language-text\">ADMIN</code>을 비교하고 있습니다. Role 을 비교해야하는 부분이 많아 진다면 중복된 코드와 상수화되지 않은 “ADMIN” 이라는 문자열은 유지보수와 사이트 이펙트를 발생 시킬것입니다.<br>\n<code class=\"language-text\">member</code>객체 스스로에게 ADMIN 이냐고 확인질문을 한다면 어떻게 될까요? 아래의 코드에서 확인 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">memberRoleTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ADMIN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">hasAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN 입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code class=\"language-text\">Member</code>를 사용하는 곳에서 더이상 “ADMIN”이라는 문자로 비교 하지않습니다. 이로인해서 ADMIN 을 판단하는 로직은 Member 에게 묻게되고\nMember 객체는 Role 을 식별하는 메소드를 가짐으로써 캡슐화와 은닉화를 통해 객체의 응집도를 증가 시킬 수 있습니다.</p>\n<p>“ADMIN” 이라는 ROLE 이 외부에서 String 으로 주입받는 것은 문제가 될 수 있습니다. 상수화되지 않은 “ADMIN” 이라는 변수를 계속해서 관리해줘야 하기 때문입니다.<br>\nROLE 은 많은 부분에서\n인증기능과 관련이 될 수 있는 부분인데 이러한 데이터가 어떠한 지정된 타입으로 되어 있지않다면 개발을 진행함에 있어서 불안한 요소가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># <span class=\"token class-name\">MemberROLE</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">MemberROLE</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">USER</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberROLE</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># <span class=\"token class-name\">Member</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MemberROLE</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MemberROLE</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> role<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">MemberROLE</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본 타입(primitive type)을 사용하지 않고 <code class=\"language-text\">MemberROLE</code>타입을 정의 함으로써 좀 더 객체지향 관점으로 코드를 작성 할 수 있지않나 생각이 듭니다.<br>\n<code class=\"language-text\">MemberROLE.isAdmin(role)</code>와 같이 객체에게 질문을 던짐으로써 객체단위의 책임이 명확히 분리 시킬 수 있습니다. 이로인해 코드의 유연함, 재사용성 증가, 확장성을\n증가 시킬수  있다고 생각합니다.</p>\n<h3 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h3>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%BA%A1%EC%8A%90%ED%99%94\">캡슐화 위키피디아</a><br>\n<a href=\"https://en.wikipedia.org/wiki/Law_of_Demeter\">Law of Demeter 위키피디아</a></p>","excerpt":"캡슐화 객체의 속성(data fields)와 행위(메서드)를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추어 은닉한다. (위키피디아) 디미터 법칙(Law of Demeter) 각 유닛은 다른 유닛에 대한 제한된 지식만 가지고 있어야 합니다. 현재 유닛과 “밀접하게” 관련된 유닛만 있어야 합니다. 각 유닛은 친구들과만 대화해야 합니다. 낯선 사람과 이야기하지 마십시오. 가까운 친구에게만 이야기하십시오. (위키피디아) 캡슐화는 외부로부터 내부 로직을 감춤으로써(은닉), 객체의 내부 데이터와 메소드의 응집도가 생깁니다. 이러한 부분은 스스로 자율적인 객체가 되는 이점이있습니다.\n프로젝트가 커지거나 유지보수를 해야할때 추가 또는 수정되는 코드의 비용을 줄일 수 있습니다.\n또한, 데이터와 메소드의 응집도가 생기므로 팀단위 개발 또는 규모가 커질때 파편화된 코드를 줄일 수 있고 중복된 코드를 방지 할 수있습니다. 캡슐화를 적용하지 않은 코드 예시 MemberTest 에서 으로 Role 에…","frontmatter":{"date":"October 30, 2021","title":"객체지향 - 캡슐화 , 디미터법칙","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/oop/2021-10-30-oop-capsule-demeter/"}},"next":{"id":"ce3dcbbe-ba07-50ad-b844-0c5ed99d7ed0","html":"<h1 id=\"kafka-connect를-활용하여-file-source-해보기\" style=\"position:relative;\"><a href=\"#kafka-connect%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-file-source-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"kafka connect를 활용하여 file source 해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kafka Connect를 활용하여 File Source 해보기</h1>\n<ol>\n<li>kafka, zookeeper가 실행되어있어야 합니다.(카프가가 없으시다면 공식 홈페이지에서 <a href=\"https://www.apache.org/dyn/closer.cgi?path=/kafka/2.7.0/kafka_2.13-2.7.0.tgz\">다운로드</a>)\n(처음 이시라면 <a href=\"https://kth12.github.io/kafka-quick-start/\">참고</a>)</li>\n<li>kafka/config 폴더를 열어보면 아래의 파일들이 존재합니다.\nconnect-file-sink.properties<br>\nconnect-standalone.properties\n위 파일들을 확용하여 File을 감시해보겠습니다.</li>\n</ol>\n<hr>\n<h3 id=\"configconnect-file-sourceproperties\" style=\"position:relative;\"><a href=\"#configconnect-file-sourceproperties\" aria-label=\"configconnect file sourceproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>config/connect-file-source.properties</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>local-file-source\n<span class=\"token assign-left variable\">connector.class</span><span class=\"token operator\">=</span>FileStreamSource\n<span class=\"token assign-left variable\">tasks.max</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/example/source.txt\n<span class=\"token assign-left variable\">topic</span><span class=\"token operator\">=</span>connect-test</code></pre></div>\n<p>위 설정 파일은, connect 이름 / connect 라이브러리(connect class) / Source Topic 이름  등등을 설정 할수 있습니다.</p>\n<h3 id=\"configconnect-standaloneproperties\" style=\"position:relative;\"><a href=\"#configconnect-standaloneproperties\" aria-label=\"configconnect standaloneproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>config/connect-standalone.properties</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">bootstrap.servers</span><span class=\"token operator\">=</span>localhost:9092\n<span class=\"token assign-left variable\">key.converter</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonConverter\n<span class=\"token assign-left variable\">value.converter</span><span class=\"token operator\">=</span>org.apache.kafka.connect.json.JsonConverter\n<span class=\"token assign-left variable\">key.converter.schemas.enable</span><span class=\"token operator\">=</span>true\n<span class=\"token assign-left variable\">value.converter.schemas.enable</span><span class=\"token operator\">=</span>true\n\n<span class=\"token assign-left variable\">offset.storage.file.filename</span><span class=\"token operator\">=</span>/tmp/connect.offsets\n<span class=\"token assign-left variable\">offset.flush.interval.ms</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span></code></pre></div>\n<p>카프카 서버 주소 설정 / Source key, value 타입 지정 / 감시할 파일 이름 등등을 설정 할 수 있습니다.</p>\n<h2 id=\"실행-해보기\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"실행 해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 해보기</h2>\n<p>기본 설정 파일에 대해 알아보았고 실행 예제를 알아보겠습니다.</p>\n<p>실행에 앞서 감시할 파일을 생성하여 줍니다.</p>\n<p>저같은 경우 “source.txt” 라는 파일을 생성해주었습니다.</p>\n<h3 id=\"실행-커맨드\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A4%EB%A7%A8%EB%93%9C\" aria-label=\"실행 커맨드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 커맨드</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties\n\nINFO Kafka startTimeMs: <span class=\"token number\">1615649461180</span> <span class=\"token punctuation\">(</span>org.apache.kafka.common.utils.AppInfoParser:121<span class=\"token punctuation\">)</span>\nINFO <span class=\"token punctuation\">[</span>Producer <span class=\"token assign-left variable\">clientId</span><span class=\"token operator\">=</span>connector-producer-local-file-source-0<span class=\"token punctuation\">]</span> Cluster ID: ovrhH6KaQnOfZ0SseIBV6g <span class=\"token punctuation\">(</span>org.apache.kafka.clients.Metadata:279<span class=\"token punctuation\">)</span>\nINFO WorkerSourceTask<span class=\"token punctuation\">{</span>id<span class=\"token operator\">=</span>local-file-source-0<span class=\"token punctuation\">}</span> Source task finished initialization and start <span class=\"token punctuation\">(</span>org.apache.kafka.connect.runtime.WorkerSourceTask:233<span class=\"token punctuation\">)</span>\nINFO Created connector local-file-source <span class=\"token punctuation\">(</span>org.apache.kafka.connect.cli.ConnectStandalone:112<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\"># 위 출력 로그처럼 정상적으로 실행이 되었다면 파일을 수정해보겠습니다.</span>\n\n$ <span class=\"token function\">cat</span> <span class=\"token operator\">>></span> source.txt\n\thi\n\thello\n\n<span class=\"token comment\"># 감시 파일(source.txt)에 내용을 입력 하였습니다.</span>\n\n$ bin/kafka-console-consumer.sh <span class=\"token parameter variable\">--topic</span> connect-test --from-beginning  --bootstrap-server localhost:9092\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"schema\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"string\"</span>,<span class=\"token string\">\"optional\"</span>:false<span class=\"token punctuation\">}</span>,<span class=\"token string\">\"payload\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"schema\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"type\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"string\"</span>,<span class=\"token string\">\"optional\"</span>:false<span class=\"token punctuation\">}</span>,<span class=\"token string\">\"payload\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 파일에서 입력했던 내용들을 컨슘되는것을 확인할 수 있습니다.</span>\n<span class=\"token comment\"># 터미널 창을 하나 더 열어 내용을 추가적으로 넣어서 실시간 동기화 되는지 확인해보겠습니다.</span></code></pre></div>\n<h3 id=\"실행-화면\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%ED%99%94%EB%A9%B4\" aria-label=\"실행 화면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 화면</h3>\n<p><img src=\"/100d83b03f60cb767cde16c10db7e29e/kafkaconnectgif.gif\" alt=\"img.png\"></p>\n<hr>\n<h3 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h3>\n<p>가장 간단하게 카프카 커넥트 예제에 대해서 알아 보았습니다.</p>\n<p>카프카 커넥트는 여러 플러그인을 붙여 다양한 데이터 소스를 커넥트 할 수 있습니다.</p>\n<p>예로, debezium 오픈소스 플러그인을 활용하면</p>\n<p>mysql, mongoDB, PostgreSQL,Oracle,SqlServer 등 데이터 베이스를 감시하고 데이터를 Source 할 수 있습니다.</p>","frontmatter":{"date":"March 14, 2021","title":"Kafka connect File Source 알아보기 & 실행","categories":"kafka","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/kafka/2021-03-14-kafka-connect-action/"}},"prev":{"id":"0a6a326c-4f31-5972-8bea-d32934ce1423","html":"<p><a href=\"https://developerfarm.wordpress.com/2012/02/03/object_calisthenics_summary/\">객체지향 생활 체조 총정리</a></p>\n<blockquote>\n<p>규칙 1: 한 메서드에 오직 한 단계의 들여쓰기만 한다.</p>\n</blockquote>\n<p>규칙 2: else 예약어를 쓰지 않는다.<br>\n규칙 3: 모든 원시값과 문자열을 포장한다.<br>\n규칙 4: 한 줄에 점을 하나만 찍는다.<br>\n규칙 5: 줄여쓰지 않는다(축약 금지).<br>\n규칙 6: 모든 엔티티를 작게 유지한다.<br>\n규칙 7: 2개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.<br>\n규칙 8: 일급 콜렉션을 쓴다.<br>\n규칙 9: 게터/세터/프로퍼티를 쓰지 않는다.</p>\n<blockquote>\n<p>(developerFarm 개발자 농장 포스팅 내용)</p>\n</blockquote>\n<p>객체지향 생활 체조 9가지의 원칙은 어떻게 보면 당연하거나, 까다롭게 느껴질 수 있다.\n모든 경우에 적용 할 수는 없겠지만 9가지 규칙이 몸에 베인다면 깔끔하고 일관된 코드를 작성 할 수 있을 것 같다.\n규칙을 지키며 작은 프로젝트를 진행 해보았는데. 프로젝트 전반적으로 객체지향,클린코드,리팩토링 측면에서 많은 도움이 되었다.\n<code class=\"language-text\">else 예약어를 쓰지 않는다.</code> 만 지키더라도 코드의 가독성이 많이 향상 된다는 것을 느꼈다.</p>","frontmatter":{"date":"November 01, 2021","title":"객체지향 생활 체조","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/oop/2021-10-31-object-calisthenics-summary/"}},"site":{"siteMetadata":{"siteUrl":"https://wooobo.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/oop/2021-10-30-oop-capsule-demeter/","nextSlug":"/kafka/2021-03-14-kafka-connect-action/","prevSlug":"/oop/2021-10-31-object-calisthenics-summary/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}