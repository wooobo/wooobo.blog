{"componentChunkName":"component---src-templates-blog-template-js","path":"/what-is-di/2023-05-16-Ioc/","result":{"data":{"cur":{"id":"c4bab96f-c4a8-58d1-967a-27b1484e5152","html":"<h1 id=\"1-iocinversion-of-control란\" style=\"position:relative;\"><a href=\"#1-iocinversion-of-control%EB%9E%80\" aria-label=\"1 iocinversion of control란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. IoC(Inversion of Control)란?</h1>\n<p>의존성 관리를 외부에 <code class=\"language-text\">위임</code>하여 객체의 생성과 관리를 제어하는 개발 패턴</p>\n<h1 id=\"2-누가-왜\" style=\"position:relative;\"><a href=\"#2-%EB%88%84%EA%B0%80-%EC%99%9C\" aria-label=\"2 누가 왜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 누가? 왜?</h1>\n<ol>\n<li>누구한테 위임하는가?</li>\n</ol>\n<p>주로 프레임 워크에 위임합니다. 대표적으로 Spring 프로레임워크라고 볼 수 있겠습니다.</p>\n<ol start=\"2\">\n<li>왜 위임하는가?</li>\n</ol>\n<p>개인적으로 생각하는 위임하는 주요 장점중 하나는 개발자가 비즈니스 로직에 집중할 수 있다는 것입니다.</p>\n<p>그렇다면, <code class=\"language-text\">의존성을 프레임워크에 위임하고 개발자는 비즈니스 로직 개발에 집중 할 수 있다.</code> 정도로 보면 되겠네요.</p>\n<h1 id=\"3-예시\" style=\"position:relative;\"><a href=\"#3-%EC%98%88%EC%8B%9C\" aria-label=\"3 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 예시</h1>\n<p><a href=\"/DI/\">DI</a>에서 활용했던 코드를 사용해서 탐구해보겠습니다.</p>\n<p>일반적으로 개발자가 객체를 생성관리 한다면 다음과 같을 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LottoService</span> lottoService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LottoService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomNumberGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그렇다면, 객체생성을 프레임워크에 위임하다고 하는데 그러한 패턴을 코드로 우선 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">LottoService</span> myService <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LottoService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ApplicationContext</code>란 객체에게 <code class=\"language-text\">LottoService.class타입</code>의 <code class=\"language-text\">Bean</code>을 달라고 하네요 🤔\n그런데 여기서 중요한 부분은 확실하게 <code class=\"language-text\">new</code>를 사용하지 않은것으로 봐서는 객체 생성을 프레임워크에 위임한 것으로 볼 수 있습니다.</p>\n<p>🚫그런데 실행했더니<br>\n<code class=\"language-text\">Exception in thread \"main\" org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.example.demo.LottoService' available</code> 에러가 발생하네요 🤔</p>\n<p>Spring 의 마법을 보기위해서 무언가 설정이 더 필요한가 봅니다. 😂\n생각해보니 그럴 수 있을것 같아요.<br>\n왜냐면 무엇을 <code class=\"language-text\">Bean</code>으로 관리해줘라고 설정하지 않았거든요.</p>\n<p><code class=\"language-text\">Bean</code>등록 방법은 엄청 간단합니다!<br>\n<code class=\"language-text\">XML</code>,<code class=\"language-text\">Java Config</code>, <code class=\"language-text\">Component Scan</code> 이렇게 <code class=\"language-text\">Bean</code>을 등록하는 방법이 있는데요. 이번에는 많이 사용하는 <code class=\"language-text\">Component Scan</code> 방식을 사용해보겠습니다.</p>\n<p><code class=\"language-text\">@Service</code> 어노테이션이란 것만 붙여주면 됩니다. 그러면 <code class=\"language-text\">Bean</code>으로 등록해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LottoService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">NumberGenerator</span> numberGenerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LottoService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberGenerator</span> numberGenerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberGenerator <span class=\"token operator\">=</span> numberGenerator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다시 실행해보겠습니다.</p>\n<p><code class=\"language-text\">Parameter 0 of constructor in com.example.demo.LottoService required a bean of type 'com.example.demo.NumberGenerator' that could not be found.</code> 에러가 발생하네요 🤔</p>\n<p><code class=\"language-text\">LottoService</code> 생성자의 0번째 파라미터(<code class=\"language-text\">NumberGenerator</code>)를 <code class=\"language-text\">Bean</code>에서 찾을 수 가 없데요 😱<br>\n<code class=\"language-text\">Bean</code>으로 관리하는 객체라면 당연히 생성자 주입해야하는 객체 또한 <code class=\"language-text\">Bean</code>에서 찾을수 있어야 할 것같네요 😂</p>\n<p>그럼 <code class=\"language-text\">NumberGenerator</code>도 <code class=\"language-text\">Bean</code>으로 등록해주면 됩니다.<br>\n<code class=\"language-text\">@Component</code> 어노테이션을 붙여주면 됩니다. 그러면 <code class=\"language-text\">Bean</code>으로 등록해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomNumberGenerator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NumberGenerator</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RandomNumberGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>드디어 장상작동 되네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.6)\n\n2023-05-17T17:10:59.007+09:00  INFO 73775 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.6 with PID 73775\n2023-05-17T17:10:59.008+09:00  INFO 73775 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2023-05-17T17:10:59.167+09:00  INFO 73775 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.267 seconds (process running for 0.447)\nLottoNumber{value=41}</code></pre></div>\n<h2 id=\"component-service-\" style=\"position:relative;\"><a href=\"#component-service-\" aria-label=\"component service  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Component, @Service… ??</h2>\n<p><code class=\"language-text\">@Component, @Service, @Repository, @Controller</code> 등의 어노테이션을 사용하여 Bean으로 등록할 클래스에 지정 할 수 있습니다.<br>\n스프링 부트는 기본적으로 클래스패스를 스캔하여 어노테이션이 지정된 클래스를 자동으로 Bean으로 등록합니다.</p>\n<p>이와 같은 방법을 사용하여 Bean을 등록하면 Spring IoC 컨테이너가 해당 Bean을 인식하고 필요한 곳에서 주입할 수 있습니다.</p>\n<h1 id=\"그런데-code-classlanguage-textnumbergeneratorcode-구현체가-여러개면-무엇을-주입할지-어떻게-정할까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%B0%EB%8D%B0-code-classlanguage-textnumbergeneratorcode-%EA%B5%AC%ED%98%84%EC%B2%B4%EA%B0%80-%EC%97%AC%EB%9F%AC%EA%B0%9C%EB%A9%B4-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%A3%BC%EC%9E%85%ED%95%A0%EC%A7%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%95%ED%95%A0%EA%B9%8C\" aria-label=\"그런데 code classlanguage textnumbergeneratorcode 구현체가 여러개면 무엇을 주입할지 어떻게 정할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔그런데 <code class=\"language-text\">NumberGenerator</code> 구현체가 여러개면 무엇을 주입할지 어떻게 정할까?</h1>\n<p><code class=\"language-text\">@Primary</code> 어노테이션을 사용하면 됩니다.<br>\n<code class=\"language-text\">@Primary</code> 어노테이션을 사용하면 여러개의 Bean 중에서 우선적으로 주입할 Bean을 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Primary</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomNumberGenerator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NumberGenerator</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RandomNumberGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이렇게 사용하면 <code class=\"language-text\">NumberGenerator</code>를 주입받는 모든 곳에서 <code class=\"language-text\">RandomNumberGenerator</code>가 주입됩니다.\n@Qualifier 어노테이션을 사용하면 주입할 Bean을 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">LottoService</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"manualNumberGenerator\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">NumberGenerator</span> numberGenerator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberGenerator <span class=\"token operator\">=</span> numberGenerator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> </p>\n<h1 id=\"어노테이션\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"어노테이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧐어노테이션???</h1>\n<p><code class=\"language-text\">@Service</code> 이런것을 클래스나 메소드 위에 붙이는 것을 말합니다.<br>\n쉽게 말해 주석입니다. 하지만 좀 더 의미있는 주석이라고 보면 됩니다.<br>\n프레임워크단에서 <code class=\"language-text\">@Service</code>이게 붙어 있으면 아 이건 이런 기능을 하는 클래스 혹은 메소드구나 인식하도록 주석을 달아 놓았다고 보면 됩니다.</p>\n<blockquote>\n<p>어노테이션은 런타임에 리플렉션을 통해 읽어들일 수도 있으며, 프레임워크나 라이브러리에서 특정 기능을 활성화하거나 설정할 때 사용될 수도 있습니다.</p>\n</blockquote>","excerpt":"1. IoC(Inversion of Control)란? 의존성 관리를 외부에 하여 객체의 생성과 관리를 제어하는 개발 패턴 2. 누가? 왜? 누구한테 위임하는가? 주로 프레임 워크에 위임합니다. 대표적으로 Spring 프로레임워크라고 볼 수 있겠습니다. 왜 위임하는가? 개인적으로 생각하는 위임하는 주요 장점중 하나는 개발자가 비즈니스 로직에 집중할 수 있다는 것입니다. 그렇다면,  정도로 보면 되겠네요. 3. 예시 DI에서 활용했던 코드를 사용해서 탐구해보겠습니다. 일반적으로 개발자가 객체를 생성관리 한다면 다음과 같을 것입니다. 그렇다면, 객체생성을 프레임워크에 위임하다고 하는데 그러한 패턴을 코드로 우선 보겠습니다. 란 객체에게 의 을 달라고 하네요 🤔\n그런데 여기서 중요한 부분은 확실하게 를 사용하지 않은것으로 봐서는 객체 생성을 프레임워크에 위임한 것으로 볼 수 있습니다. 🚫그런데 실행했더니  에러가 발생하네요 🤔 Spring 의 마법을 보기위해서 무언가 설정이 더 필요한가…","frontmatter":{"date":"May 17, 2023","title":"도대체 IOC?","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/what-is-di/2023-05-16-Ioc/"}},"next":{"id":"aa2ce8cb-df91-57d7-84fc-f64be0a8a64c","html":"<h1 id=\"1-aopaspect-oriented-programming\" style=\"position:relative;\"><a href=\"#1-aopaspect-oriented-programming\" aria-label=\"1 aopaspect oriented programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. AOP(Aspect-Oriented Programming)?</h1>\n<p>관점지향 프로그래밍 : 관점 기반의 모듈화와 코드 분리를 위한 프로그래밍 패러다임</p>\n<p>난해합니다 다양한 정보를 탐색해봐야할것 같다.</p>\n<blockquote>\n<p>AOP(Aspect-Oriented Programming)에서 Aspect 는 특정 동작이나 기능을 캡슐화하는 횡단 관심사의 모듈식 단위를 말합니다.\n측면은 로깅, 오류 처리 또는 보안과 같이 시스템의 여러 모듈 또는 구성 요소에 걸쳐 차단되는 문제를 분리하고 캡슐화하는 데 사용됩니다.\n이들은 프로그램의 핵심 비즈니스 로직과 별도로 이러한 교차 관심사를 모듈화하고 관리할 수 있는 방법을 제공합니다.</p>\n</blockquote>\n<blockquote>\n<p>AOP는 단지 새로운 프로그래밍 패러다임이라는 점에 유의해야 합니다. 어떤 식으로든 OOP를 대체하지는 않습니다. 오히려 모듈성을 달성하고 코드 혼란을 줄이는 또 다른 방법을 제공하여 OOP를 보완합니다.\nAOP에서 aspect는 관심의 모듈화로 정의될 수 있다. 따라서 이러한 프로그래밍 스타일을 관점 지향 프로그래밍이라고 합니다.\nOOP에서는 모듈화를 달성하기 위해 클래스를 활용할 수 있습니다. 반대로 aspect를 통해 AOP에서 모듈성을 달성할 수 있다.</p>\n<p>AOP는 OOP의 모든 이점을 가진 프로그래밍 패러다임입니다.</p>\n<p>출처 : <a href=\"https://www.infoworld.com/article/3040557/my-two-cents-on-aspect-oriented-programming.html\">링크</a></p>\n</blockquote>\n<blockquote>\n<p>ChatGPT 와 대화<br>\nQ. AOP 에서 관점이란?<br>\nA. AOP(Aspect-Oriented Programming)에서 “관점”이란, 프로그램의 횡단 관심사(cross-cutting concern)를 다루기 위한 모듈화된 코드 단위를 의미합니다.\n관점은 여러 부분에 적용될 수 있는 특정 기능을 캡슐화하며, 관심사의 분리와 코드 재사용성을 촉진합니다.\nAOP에서 관점은 타겟 객체나 메서드의 동작을 직접 수정하지 않고, 동작을 주입하거나 수정하는 역할을 담당합니다.</p>\n<p>Q. 그 관점이라는게 무엇입니까?<br>\nA. AOP에서 “관점(Aspect)“은 횡단 관심사(cross-cutting concern)를 처리하기 위한 코드 모듈입니다.\n횡단 관심사는 프로그램의 여러 부분에서 발생하는 공통적인 동작이나 기능을 의미합니다. 예를 들어, 로깅, 트랜잭션 관리, 보안, 캐싱 등은 횡단 관심사의 예입니다.\n관점은 이러한 횡단 관심사를 캡슐화하여 코드의 다른 부분에서 재사용할 수 있는 독립적인 모듈로 만듭니다.\n즉, 관점은 애플리케이션의 여러 지점에 적용될 수 있는 특정 기능을 정의하는 것입니다.\nAOP에서는 관점을 사용하여 횡단 관심사를 분리하고, 핵심 비즈니스 로직과 분리된 형태로 관리하여 코드의 가독성과 유지보수성을 향상시킵니다.</p>\n<p>Q. AOP에서 사용되는 개념들에는 어떤것들이 있습니까?<br>\nA.<br>\nAspect: 횡단 관심사(cross-cutting concern)를 처리하기 위한 모듈화된 코드 단위입니다. 예를 들어, 로깅, 트랜잭션 관리, 보안 등이 관점의 예입니다.</p>\n<p>Target: 관점이 적용되는 원래의 객체 또는 메서드입니다. 관점이 적용되어 동작이 수정되는 대상입니다.</p>\n<p>Advice: 관점이 적용될 때 실행되는 코드 블록입니다. 조언은 관점이 주입하는 동작 자체를 나타냅니다. 예를 들어, 관점이 대상 메서드 호출 전에 로깅을 추가하는 경우, 로깅 코드가 조언에 해당합니다.</p>\n<p>Join Point: 프로그램의 실행 중에 관점이 적용될 수 있는 특정한 지점을 의미합니다. 메서드 호출, 예외 발생, 필드 접근 등이 조인 포인트의 예입니다.</p>\n<p>Pointcut: 관점이 적용될 조인 포인트의 선택 기준을 나타냅니다. 포인트컷은 특정 메서드, 패키지, 클래스 등을 식별하여 관점이 적용되어야 하는 위치를 결정합니다.</p>\n<p>Proxy: 대상 객체를 감싸고 있는 객체로, 관점이 적용되는 중개 역할을 합니다. 프록시는 대상에 대한 간접적인 접근을 제공하고, 관점이 적용되는 추가 동작을 수행합니다.</p>\n</blockquote>\n<p>관점(측면), 모듈화 의 키워드가 많이 보인다.</p>\n<p>그렇다면 무슨 관점들이 있는건까?\n로깅, 트랜잭션 관리, 보안, 캐싱 등이 있어보인다.\n이러한 관점을 분리 시키는것이 모듈화를 시킨다는 것으로 보여짐.</p>\n<p>만약 어떠한 메소드에 로그를 남기고 싶어서 아래와 같이 <code class=\"language-text\">System.out.println</code>을 추가 했다고 가정</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PositiveNumber</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PositiveNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">lessThan</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PositiveNumber</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lessThan 메서드 실행\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만, 단일책임원칙으로 보았을때 좋지 않아보인다. 🤔<br>\n책임이 비교하는것 뿐만 아니라 로그를 남기는 책임까지 부여되고 말았다.</p>\n<p>로그를 남기는 <code class=\"language-text\">관심사</code>를 분리 시켜야 할 것 같다.</p>\n<p><img src=\"/assets/images/aspect_01.png\" alt=\"aspect_01.png\" /></p>\n<p>외부에서 <code class=\"language-text\">lessThan</code> 를 무언가의 관점(측면)으로 바라본다… 이런것 아닐까?</p>\n<p><code class=\"language-text\">나의 관심사는 로깅이야 타겟은 lessThan 메소드</code> 라고 생각해볼수 있을것 같다. 🧐</p>","frontmatter":{"date":"May 17, 2023","title":"도대체 AOP?","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/what-is-di/2023-05-18-AOP/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://wooobo.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/what-is-di/2023-05-16-Ioc/","nextSlug":"/what-is-di/2023-05-18-AOP/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}