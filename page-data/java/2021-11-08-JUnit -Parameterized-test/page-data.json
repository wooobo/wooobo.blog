{"componentChunkName":"component---src-templates-blog-template-js","path":"/java/2021-11-08-JUnit -Parameterized-test/","result":{"data":{"cur":{"id":"213bc46d-65d7-596f-b645-a346607e3b37","html":"<h1 id=\"code-classlanguage-textparameterizedtestcode-로-다양하게-테스트-해보기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textparameterizedtestcode-%EB%A1%9C-%EB%8B%A4%EC%96%91%ED%95%98%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"code classlanguage textparameterizedtestcode 로 다양하게 테스트 해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">@ParameterizedTest</code> 로 다양하게 테스트 해보기</h1>\n<p><code class=\"language-text\">@ParameterizedTest</code> 다양한 파라미터로 테스트 할때 유용하게 사용됩니다.</p>\n<h2 id=\"5보다-작은-숫자-테스트\" style=\"position:relative;\"><a href=\"#5%EB%B3%B4%EB%8B%A4-%EC%9E%91%EC%9D%80-%EC%88%AB%EC%9E%90-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"5보다 작은 숫자 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5보다 작은 숫자 테스트</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">isLessThan_5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드 처럼 6이하의 케이스를 테스트 하고싶다고 할때, 중복된 코드가 많이 발생하게 됩니다.</p>\n<p>이러한 부분을 <code class=\"language-text\">@ParameterizedTest</code> 을 사용해서 리팩토링 해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ParameterizedTest</span>\n<span class=\"token annotation punctuation\">@ValueSource</span><span class=\"token punctuation\">(</span>ints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5보다 작은 숫자 테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">ValueSource_test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> expected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@ValueSource</code> 를 활용해서 테스트가 진행될때 숫차적으로 <code class=\"language-text\">(int expected)</code> 인자로 부여되면서 진행됩니다.<br>\n<code class=\"language-text\">ints</code> 이 외에도 <code class=\"language-text\">strings = {\"1\", \"2\", \"3\", \"4\", \"5\"}</code> 등 다른타입도 적용가능합니다.</p>\n<h2 id=\"한개-이상의-인자를-사용하고-싶을때\" style=\"position:relative;\"><a href=\"#%ED%95%9C%EA%B0%9C-%EC%9D%B4%EC%83%81%EC%9D%98-%EC%9D%B8%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%84%EB%95%8C\" aria-label=\"한개 이상의 인자를 사용하고 싶을때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한개 이상의 인자를 사용하고 싶을때?</h2>\n<p>위 예제는 5보다 작은 숫자 테스트 였습니다.<br>\n그런데 {숫자}보다 작은 숫자 테스트 하고싶을때는 아래와 같은 방법을 사용 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ParameterizedTest</span>\n<span class=\"token annotation punctuation\">@CsvSource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"1,2\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// number, expected</span>\n    <span class=\"token string\">\"20,30\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">csvSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> expected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@CsvSource</code> 의 기본 구분자는 <code class=\"language-text\">\",\"</code>입니다.\n만약 다른 구분자를 사용하고 싶을때는</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token annotation punctuation\">@ParameterizedTest</span>\n  <span class=\"token annotation punctuation\">@CsvSource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"1:2\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"20:30\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delimiter <span class=\"token operator\">=</span> <span class=\"token char\">':'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">delimiter = ':'</code> 를 통해 다른 구분자를 사용해서 분리 시킬수 있습니다.</p>\n<h2 id=\"primitive-type-타입-외-객체-부여하기\" style=\"position:relative;\"><a href=\"#primitive-type-%ED%83%80%EC%9E%85-%EC%99%B8-%EA%B0%9D%EC%B2%B4-%EB%B6%80%EC%97%AC%ED%95%98%EA%B8%B0\" aria-label=\"primitive type 타입 외 객체 부여하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive type 타입 외 객체 부여하기</h2>\n<p><code class=\"language-text\">@MethodSource(\"{메소드 이름}\")</code> 을 사용하면 다양하게 인자를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestNumber</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TestNumber 를 인자로 사용해보겠습니다.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@ParameterizedTest</span>\n    <span class=\"token annotation punctuation\">@MethodSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"이것은_주입인자_메소드\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token class-name\">MethodSource_test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestNumber</span> testNumber<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>testNumber<span class=\"token punctuation\">.</span><span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">></span></span> 이것은_주입인자_메소드<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Arguments</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TestNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">private static Stream&lt;Arguments> 이것은_주입인자_메소드() {</code> 메소드처럼 인자를 정의하고<br>\n<code class=\"language-text\">@MethodSource(\"이것은_주입인자_메소드\")</code> 를 통해 메소드 이름을 정의하면,\nPrimitive type 말고도 다양하게 테스트 할 수 있습니다~</p>","excerpt":"로 다양하게 테스트 해보기  다양한 파라미터로 테스트 할때 유용하게 사용됩니다. 5보다 작은 숫자 테스트 위 코드 처럼 6이하의 케이스를 테스트 하고싶다고 할때, 중복된 코드가 많이 발생하게 됩니다. 이러한 부분을  을 사용해서 리팩토링 해보겠습니다.  를 활용해서 테스트가 진행될때 숫차적으로  인자로 부여되면서 진행됩니다.  이 외에도  등 다른타입도 적용가능합니다. 한개 이상의 인자를 사용하고 싶을때? 위 예제는 5보다 작은 숫자 테스트 였습니다. 그런데 {숫자}보다 작은 숫자 테스트 하고싶을때는 아래와 같은 방법을 사용 할 수 있습니다.  의 기본 구분자는 입니다.\n만약 다른 구분자를 사용하고 싶을때는  를 통해 다른 구분자를 사용해서 분리 시킬수 있습니다. Primitive type 타입 외 객체 부여하기  을 사용하면 다양하게 인자를 사용할 수 있습니다.  메소드처럼 인자를 정의하고  를 통해 메소드 이름을 정의하면,\nPrimitive type 말고도 다양하게 테스트 할 …","frontmatter":{"date":"November 05, 2021","title":"JUnit - Parameterized Test","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/java/2021-11-08-JUnit -Parameterized-test/"}},"next":{"id":"d9a21c71-26ca-5f12-a18f-d597ef718254","html":"<br>\n<p><a href=\"https://techblog.woowahan.com/2527/\">Java Enum 활용기</a> 참고하여 작성되었습니다.</p>\n<h1 id=\"자바-이넘\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%9D%B4%EB%84%98\" aria-label=\"자바 이넘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 이넘</h1>\n<p>자비 enum 을 활용하면 상태와 행위를 한곳에서 관리할 수 있는 장점에 대해서 알아 보겠습니다.</p>\n<p>예시로 로또 상금 로직 구현해보면서 파악해보겠습니다.\n우선 Enum 미적용된 코드부터 살펴 보겠습니다.</p>\n<h2 id=\"enum-으로-적용안되었을-경우\" style=\"position:relative;\"><a href=\"#enum-%EC%9C%BC%EB%A1%9C-%EC%A0%81%EC%9A%A9%EC%95%88%EB%90%98%EC%97%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"enum 으로 적용안되었을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum 으로 적용안되었을 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LottoRank</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">FIRST_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">SECOND_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">80000L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">THIRD_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">NONE_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MATCHED_COUNT_FIRST</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MATCHED_COUNT_SECOND</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MATCHED_COUNT_THIRD</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getPrize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_FIRST</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">FIRST_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_SECOND</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">SECOND_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_THIRD</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">THIRD_PRIZE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">LottoRank</code> 클래스는 맞춘 로또 숫자에 따라 상금을 반환해주는 <code class=\"language-text\">getPrize</code> 메소드를 가지고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># 테스트 코드\n<span class=\"token class-name\">LottoRank</span> lottoRank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LottoRank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> matchedCount <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Long</span> prize <span class=\"token operator\">=</span> lottoRank<span class=\"token punctuation\">.</span><span class=\"token function\">getPrize</span><span class=\"token punctuation\">(</span>matchedCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>prize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 6개 일치이므로 1000000 이 출력됩니다.</span></code></pre></div>\n<p>우선 위 코드는 확장성에 취약한 상태입니다.<br>\n만약에 4등의 상금이 줘야하는 추가 요구상황이 주어졌다면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    # 추가\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">FOURTH_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getPrize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_FIRST</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">FIRST_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_SECOND</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">SECOND_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_THIRD</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">THIRD_PRIZE</span><span class=\"token punctuation\">;</span>\n             # 추가\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_FOURTH</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">FOURTH_PRIZE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 상태와 로직을 각각 수정해주어야 합니다.<br>\n<code class=\"language-text\">LottoRank</code> 클래스의 인스턴스 변수와 메소드가 같이 있어서 그나마 나아보일 수도 있지만,<br>\n위 예제는 단순한 예제이고 복잡해질 경우 유지보수와 확장성에서 어려움을 격을 수 있습니다.</p>\n<h2 id=\"enum-을-활용한다면-어떻게-될까요\" style=\"position:relative;\"><a href=\"#enum-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C%EC%9A%94\" aria-label=\"enum 을 활용한다면 어떻게 될까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum 을 활용한다면 어떻게 될까요?</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">LottoRankEnum</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">FIRST</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SECOND</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">THIRD</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">FOURTH_PRIZE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">NONE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 당첨된 로또 갯수</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> prize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 상금</span>\n\n    <span class=\"token class-name\">LottoRankEnum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> prize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matchedCount <span class=\"token operator\">=</span> matchedCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prize <span class=\"token operator\">=</span> prize<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LottoRankEnum</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lottoRankEnum <span class=\"token operator\">-></span> lottoRankEnum<span class=\"token punctuation\">.</span>matchedCount <span class=\"token operator\">==</span> matchedCount<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NONE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LottoRankEnumTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">LottoRankEnum</span> lottoRankEnum <span class=\"token operator\">=</span> <span class=\"token class-name\">LottoRankEnum</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lottoRankEnum<span class=\"token punctuation\">.</span>prize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 : 1000000</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 Enum 에도 4등이 빠져 있습니다. 4등을 추가 해주고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token function\">FOURTH_PRIZE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>위 코드만 추가해주면 확장 할 수 있습니다.\n이는 상태와 로직이 하나로 정의 되어 있으므로 한번에 관리될수 있는 장점이 있습니다.</p>\n<p>또한 처음 클래스로 만들었던 코드에서는\n<code class=\"language-text\">FIRST_PRIZE = 1000000L</code>, <code class=\"language-text\">MATCHED_COUNT_FIRST = 6</code> 연관이 있지만, 서로의 연관성은 로직을 보지 않는다면 알기가 힘듭니다.\n이는 프로젝트가 커지면 실수로 이어질수 있는부분이라고 생각됩니다.</p>\n<p><code class=\"language-text\">Enum</code> 객체에서는 <code class=\"language-text\">FIRST(6, 1_000_000L)</code> 이처럼 두 상태가 같이 움직이게 되므로 연관이 있다는걸 바로 알수있습니다.<br>\n또한, 상태와 로직이 같이 움직이므로 확장성과 유지,보수에서 많은 장점이 있어보입니다.</p>","frontmatter":{"date":"November 05, 2021","title":"java - ENUM(상태와 행위를 한곳에서 관리)","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/java/2021-11-05-java-enum/"}},"prev":{"id":"5ccac919-8ba0-504a-b3b4-848d167ff14e","html":"<br>\nJava 에서 Collection 의 불변성을 보장해주는 Collections.unmodifiableList 이 있습니다.  \nCollections.unmodifiableList(list) 로 반환된 객체는 수정삭제가 불가능합니다.\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"> <span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 :[1]</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : true</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : [1, 2]</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : [1, 2]</span>\n\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : java.lang.UnsupportedOperationException 에러 발생</span>\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 결과 : java.lang.UnsupportedOperationException 에러 발생</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드 출력 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>UnsupportedOperationException</span></code></pre></div>\n<p><code class=\"language-text\">list.equals(list2)</code> 는 <code class=\"language-text\">true</code> 입니다. Collections.unmodifiableList 으로 반환된 객체는 결국 원본객체의 참조입니다.<br>\n그러므로 원본 객체가 수정되면 <code class=\"language-text\">Collections.unmodifiableList</code> 으로 반횐된 <code class=\"language-text\">list2</code>도 동일한 값을 가집니다.<br>\n그러나, <code class=\"language-text\">list2</code>는 불변객체 이므로 수정 삭제가 불가능합니다.</p>","frontmatter":{"date":"November 05, 2021","title":"Java - Collections.unmodifiableList 알아보기","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/java/2021-11-05-collections-unmodifiableList/"}},"site":{"siteMetadata":{"siteUrl":"https://wooobo.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/java/2021-11-08-JUnit -Parameterized-test/","nextSlug":"/java/2021-11-05-java-enum/","prevSlug":"/java/2021-11-05-collections-unmodifiableList/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}