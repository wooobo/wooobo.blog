{"componentChunkName":"component---src-templates-blog-template-js","path":"/java/2021-11-01-what-is-Iterator/","result":{"data":{"cur":{"id":"b5a81a84-034f-588d-8c70-c0888a155e57","html":"<p>#이터레이터(Iterator) 란?</p>\n<blockquote>\n<p>반복자(iterator)는 객체 지향적 프로그래밍에서 배열이나 그와 유사한 자료 구조의 내부의 요소를 순회(traversing)하는 객체이다.\n(위키백과)</p>\n</blockquote>\n<p>Iterator 는 컬렉션 프레임워크에 속하는 인터페이스입니다. 컬렉션을 탐색하고 데이터 요소에 액세스하며 컬렉션의 데이터 요소를 제거할 수 있습니다.</p>\n<h2 id=\"iterator-메소드\" style=\"position:relative;\"><a href=\"#iterator-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"iterator 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterator 메소드</h2>\n<p>Iterator.hasNext() : 다음 요소가 있으면 true 를 반환<br>\nIterator.next() : 다음 요소를 반환<br>\nIterator.remove() : 현재 요소를 제거</p>\n<h3 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>example code</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  # <span class=\"token class-name\">ArrayList</span>\n  <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> cars<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ArrayList : \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  # <span class=\"token class-name\">Set</span>\n  <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> setCars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  setCars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  setCars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  setCars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  setCars<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  \n  <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iter2 <span class=\"token operator\">=</span> setCars<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter2<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set : \"</span> <span class=\"token operator\">+</span> iter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Iterator 를 잘 활용하면 코드를 단순화하고 일반화 할 수 있을 것 같다.</p>","excerpt":"#이터레이터(Iterator) 란? 반복자(iterator)는 객체 지향적 프로그래밍에서 배열이나 그와 유사한 자료 구조의 내부의 요소를 순회(traversing)하는 객체이다.\n(위키백과) Iterator 는 컬렉션 프레임워크에 속하는 인터페이스입니다. 컬렉션을 탐색하고 데이터 요소에 액세스하며 컬렉션의 데이터 요소를 제거할 수 있습니다. Iterator 메소드 Iterator.hasNext() : 다음 요소가 있으면 true 를 반환 Iterator.next() : 다음 요소를 반환 Iterator.remove() : 현재 요소를 제거 example code Iterator 를 잘 활용하면 코드를 단순화하고 일반화 할 수 있을 것 같다.","frontmatter":{"date":"November 02, 2021","title":"Iterator?","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/java/2021-11-01-what-is-Iterator/"}},"next":{"id":"0a6a326c-4f31-5972-8bea-d32934ce1423","html":"<p><a href=\"https://developerfarm.wordpress.com/2012/02/03/object_calisthenics_summary/\">객체지향 생활 체조 총정리</a></p>\n<blockquote>\n<p>규칙 1: 한 메서드에 오직 한 단계의 들여쓰기만 한다.</p>\n</blockquote>\n<p>규칙 2: else 예약어를 쓰지 않는다.<br>\n규칙 3: 모든 원시값과 문자열을 포장한다.<br>\n규칙 4: 한 줄에 점을 하나만 찍는다.<br>\n규칙 5: 줄여쓰지 않는다(축약 금지).<br>\n규칙 6: 모든 엔티티를 작게 유지한다.<br>\n규칙 7: 2개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.<br>\n규칙 8: 일급 콜렉션을 쓴다.<br>\n규칙 9: 게터/세터/프로퍼티를 쓰지 않는다.</p>\n<blockquote>\n<p>(developerFarm 개발자 농장 포스팅 내용)</p>\n</blockquote>\n<p>객체지향 생활 체조 9가지의 원칙은 어떻게 보면 당연하거나, 까다롭게 느껴질 수 있다.\n모든 경우에 적용 할 수는 없겠지만 9가지 규칙이 몸에 베인다면 깔끔하고 일관된 코드를 작성 할 수 있을 것 같다.\n규칙을 지키며 작은 프로젝트를 진행 해보았는데. 프로젝트 전반적으로 객체지향,클린코드,리팩토링 측면에서 많은 도움이 되었다.\n<code class=\"language-text\">else 예약어를 쓰지 않는다.</code> 만 지키더라도 코드의 가독성이 많이 향상 된다는 것을 느꼈다.</p>","frontmatter":{"date":"November 01, 2021","title":"객체지향 생활 체조","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/oop/2021-10-31-object-calisthenics-summary/"}},"prev":{"id":"d9a21c71-26ca-5f12-a18f-d597ef718254","html":"<br>\n<p><a href=\"https://techblog.woowahan.com/2527/\">Java Enum 활용기</a> 참고하여 작성되었습니다.</p>\n<h1 id=\"자바-이넘\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%9D%B4%EB%84%98\" aria-label=\"자바 이넘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 이넘</h1>\n<p>자비 enum 을 활용하면 상태와 행위를 한곳에서 관리할 수 있는 장점에 대해서 알아 보겠습니다.</p>\n<p>예시로 로또 상금 로직 구현해보면서 파악해보겠습니다.\n우선 Enum 미적용된 코드부터 살펴 보겠습니다.</p>\n<h2 id=\"enum-으로-적용안되었을-경우\" style=\"position:relative;\"><a href=\"#enum-%EC%9C%BC%EB%A1%9C-%EC%A0%81%EC%9A%A9%EC%95%88%EB%90%98%EC%97%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"enum 으로 적용안되었을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum 으로 적용안되었을 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LottoRank</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">FIRST_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">SECOND_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">80000L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">THIRD_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">NONE_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MATCHED_COUNT_FIRST</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MATCHED_COUNT_SECOND</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MATCHED_COUNT_THIRD</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getPrize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_FIRST</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">FIRST_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_SECOND</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">SECOND_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_THIRD</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">THIRD_PRIZE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">LottoRank</code> 클래스는 맞춘 로또 숫자에 따라 상금을 반환해주는 <code class=\"language-text\">getPrize</code> 메소드를 가지고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"># 테스트 코드\n<span class=\"token class-name\">LottoRank</span> lottoRank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LottoRank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> matchedCount <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Long</span> prize <span class=\"token operator\">=</span> lottoRank<span class=\"token punctuation\">.</span><span class=\"token function\">getPrize</span><span class=\"token punctuation\">(</span>matchedCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>prize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 6개 일치이므로 1000000 이 출력됩니다.</span></code></pre></div>\n<p>우선 위 코드는 확장성에 취약한 상태입니다.<br>\n만약에 4등의 상금이 줘야하는 추가 요구상황이 주어졌다면 어떻게 될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    # 추가\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">FOURTH_PRIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getPrize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_FIRST</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">FIRST_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_SECOND</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">SECOND_PRIZE</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_THIRD</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">THIRD_PRIZE</span><span class=\"token punctuation\">;</span>\n             # 추가\n            <span class=\"token keyword\">case</span>  <span class=\"token constant\">MATCHED_COUNT_FOURTH</span> <span class=\"token operator\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant\">FOURTH_PRIZE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 상태와 로직을 각각 수정해주어야 합니다.<br>\n<code class=\"language-text\">LottoRank</code> 클래스의 인스턴스 변수와 메소드가 같이 있어서 그나마 나아보일 수도 있지만,<br>\n위 예제는 단순한 예제이고 복잡해질 경우 유지보수와 확장성에서 어려움을 격을 수 있습니다.</p>\n<h2 id=\"enum-을-활용한다면-어떻게-될까요\" style=\"position:relative;\"><a href=\"#enum-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C%EC%9A%94\" aria-label=\"enum 을 활용한다면 어떻게 될까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum 을 활용한다면 어떻게 될까요?</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">LottoRankEnum</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">FIRST</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">SECOND</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">THIRD</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">FOURTH_PRIZE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">NONE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 당첨된 로또 갯수</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> prize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 상금</span>\n\n    <span class=\"token class-name\">LottoRankEnum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> prize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matchedCount <span class=\"token operator\">=</span> matchedCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prize <span class=\"token operator\">=</span> prize<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">LottoRankEnum</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matchedCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>lottoRankEnum <span class=\"token operator\">-></span> lottoRankEnum<span class=\"token punctuation\">.</span>matchedCount <span class=\"token operator\">==</span> matchedCount<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NONE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">LottoRankEnumTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">LottoRankEnum</span> lottoRankEnum <span class=\"token operator\">=</span> <span class=\"token class-name\">LottoRankEnum</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lottoRankEnum<span class=\"token punctuation\">.</span>prize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 출력 : 1000000</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 Enum 에도 4등이 빠져 있습니다. 4등을 추가 해주고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token function\">FOURTH_PRIZE</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1_000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>위 코드만 추가해주면 확장 할 수 있습니다.\n이는 상태와 로직이 하나로 정의 되어 있으므로 한번에 관리될수 있는 장점이 있습니다.</p>\n<p>또한 처음 클래스로 만들었던 코드에서는\n<code class=\"language-text\">FIRST_PRIZE = 1000000L</code>, <code class=\"language-text\">MATCHED_COUNT_FIRST = 6</code> 연관이 있지만, 서로의 연관성은 로직을 보지 않는다면 알기가 힘듭니다.\n이는 프로젝트가 커지면 실수로 이어질수 있는부분이라고 생각됩니다.</p>\n<p><code class=\"language-text\">Enum</code> 객체에서는 <code class=\"language-text\">FIRST(6, 1_000_000L)</code> 이처럼 두 상태가 같이 움직이게 되므로 연관이 있다는걸 바로 알수있습니다.<br>\n또한, 상태와 로직이 같이 움직이므로 확장성과 유지,보수에서 많은 장점이 있어보입니다.</p>","frontmatter":{"date":"November 05, 2021","title":"java - ENUM(상태와 행위를 한곳에서 관리)","categories":"프로그래밍","author":"wooobo","emoji":"🔮"},"fields":{"slug":"/java/2021-11-05-java-enum/"}},"site":{"siteMetadata":{"siteUrl":"https://wooobo.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/java/2021-11-01-what-is-Iterator/","nextSlug":"/oop/2021-10-31-object-calisthenics-summary/","prevSlug":"/java/2021-11-05-java-enum/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}